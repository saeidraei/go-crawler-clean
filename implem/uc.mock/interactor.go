// Code generated by MockGen. DO NOT EDIT.
// Source: ./uc/INTERACTOR.go

// Package uc is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/saeidraei/go-crawler-clean/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Log mocks base method
func (m *MockLogger) Log(arg0 ...interface{}) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Log", varargs...)
}

// Log indicates an expected call of Log
func (mr *MockLoggerMockRecorder) Log(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), arg0...)
}


// MockUrlRW is a mock of UrlRW interface
type MockUrlRW struct {
	ctrl     *gomock.Controller
	recorder *MockUrlRWMockRecorder
}

// MockUrlRWMockRecorder is the mock recorder for MockUrlRW
type MockUrlRWMockRecorder struct {
	mock *MockUrlRW
}

// NewMockUrlRW creates a new mock instance
func NewMockUrlRW(ctrl *gomock.Controller) *MockUrlRW {
	mock := &MockUrlRW{ctrl: ctrl}
	mock.recorder = &MockUrlRWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUrlRW) EXPECT() *MockUrlRWMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUrlRW) Create(username, email, password string) (*domain.Url, error) {
	ret := m.ctrl.Call(m, "Create", username, email, password)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUrlRWMockRecorder) Create(username, email, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUrlRW)(nil).Create), username, email, password)
}

// GetByName mocks base method
func (m *MockUrlRW) GetByName(userName string) (*domain.Url, error) {
	ret := m.ctrl.Call(m, "GetByName", userName)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockUrlRWMockRecorder) GetByName(userName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockUrlRW)(nil).GetByName), userName)
}

// GetByEmailAndPassword mocks base method
func (m *MockUrlRW) GetByEmailAndPassword(email, password string) (*domain.Url, error) {
	ret := m.ctrl.Call(m, "GetByEmailAndPassword", email, password)
	ret0, _ := ret[0].(*domain.Url)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailAndPassword indicates an expected call of GetByEmailAndPassword
func (mr *MockUrlRWMockRecorder) GetByEmailAndPassword(email, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailAndPassword", reflect.TypeOf((*MockUrlRW)(nil).GetByEmailAndPassword), email, password)
}

// Save mocks base method
func (m *MockUrlRW) Save(user domain.Url) error {
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUrlRWMockRecorder) Save(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUrlRW)(nil).Save), user)
}


// MockUrlValidator is a mock of UrlValidator interface
type MockUrlValidator struct {
	ctrl     *gomock.Controller
	recorder *MockUrlValidatorMockRecorder
}

// MockUrlValidatorMockRecorder is the mock recorder for MockUrlValidator
type MockUrlValidatorMockRecorder struct {
	mock *MockUrlValidator
}

// NewMockUrlValidator creates a new mock instance
func NewMockUrlValidator(ctrl *gomock.Controller) *MockUrlValidator {
	mock := &MockUrlValidator{ctrl: ctrl}
	mock.recorder = &MockUrlValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUrlValidator) EXPECT() *MockUrlValidatorMockRecorder {
	return m.recorder
}

// CheckUrl mocks base method
func (m *MockUrlValidator) CheckUrl(user domain.Url) error {
	ret := m.ctrl.Call(m, "CheckUrl", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUrl indicates an expected call of CheckUrl
func (mr *MockUrlValidatorMockRecorder) CheckUrl(user interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUrl", reflect.TypeOf((*MockUrlValidator)(nil).CheckUrl), user)
}

// MockArticleValidator is a mock of ArticleValidator interface
type MockArticleValidator struct {
	ctrl     *gomock.Controller
	recorder *MockArticleValidatorMockRecorder
}

// MockArticleValidatorMockRecorder is the mock recorder for MockArticleValidator
type MockArticleValidatorMockRecorder struct {
	mock *MockArticleValidator
}

// NewMockArticleValidator creates a new mock instance
func NewMockArticleValidator(ctrl *gomock.Controller) *MockArticleValidator {
	mock := &MockArticleValidator{ctrl: ctrl}
	mock.recorder = &MockArticleValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockArticleValidator) EXPECT() *MockArticleValidatorMockRecorder {
	return m.recorder
}

// BeforeCreationCheck mocks base method
func (m *MockArticleValidator) BeforeCreationCheck(article *domain.Article) error {
	ret := m.ctrl.Call(m, "BeforeCreationCheck", article)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeCreationCheck indicates an expected call of BeforeCreationCheck
func (mr *MockArticleValidatorMockRecorder) BeforeCreationCheck(article interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeCreationCheck", reflect.TypeOf((*MockArticleValidator)(nil).BeforeCreationCheck), article)
}

// BeforeUpdateCheck mocks base method
func (m *MockArticleValidator) BeforeUpdateCheck(article *domain.Article) error {
	ret := m.ctrl.Call(m, "BeforeUpdateCheck", article)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeforeUpdateCheck indicates an expected call of BeforeUpdateCheck
func (mr *MockArticleValidatorMockRecorder) BeforeUpdateCheck(article interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeUpdateCheck", reflect.TypeOf((*MockArticleValidator)(nil).BeforeUpdateCheck), article)
}
